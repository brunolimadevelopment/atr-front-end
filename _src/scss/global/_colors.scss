
$colors: (
  black: #000000,
  white: #ffffff,
  yellow: #F7BB25,
  orange: #F49322,
  gray:   #747474,
  graySlim:  #F4F4F4,
  orangeHover: #dc821a,

  btns:(
    white:     #fff,
    orange:    #F49322,
  ),

  titles:(
    white:  #fff,
    green: #288F45
  ),

	semantic:(
		sucess:  #12bc00,
		info:    #0a84ff,
		warning: #d76e00,
		error:   #d70022
	),

	main:(
		primary:   #ff2b7c, 
		secondary: #20a29a, 
    third:     #00bba3, 
		link:      #45a1ff
	)
);

// Color = cl
// Colors function
@function cl($color-name, $color-variant: null) {
  // color variant is optional
  @if ($color-variant != null) {
    @if map-has-key($colors, $color-name) {
      @return map-get(map-get($colors, $color-name), $color-variant);
    }
  } @else {
    @return map-get($colors, $color-name);
  }

  @warn "Unknown `#{$color-name}` in $palettes.";
  @return null;
}

// Construction
@mixin make-color($name: color){
  @each $theme in map-keys($colors) {
    @each $length in map-get($colors, $theme) {
      @if ( length($length) >= 2 ) {
        .#{$name}-#{$theme}-#{ nth($length, 1) },
        %#{$name}-#{$theme}-#{ nth($length, 1) }{
          color: nth($length, 2);
        }
      } @else {
        .#{$name}-#{$theme}
        %#{$name}-#{$theme}{
          color: #{ nth($length, 1) };
        }
      }
    }
  }
}

// @include make-color($prefix + 'color');